
notImplementedYet <- function(tkParent, env) {
  lab <- tk2label(tkParent, text="Not implemented yet.")
  return(lab)
}

#' Creates a function that creates a slider widget.
#'
#' The created function takes two parameters, tkParent (the parent for the new slider widget) and
#' env (an environment that provides access to the slide parameter).
#'
#' @param varname          a name for the parameter that will be controlled by a slider
#' @param from             the minimum allowed value
#' @param to               the maximum allowed value
#' @param init             the initial value of the parameter. Optional, default is the mean of from and to.
#' @param digits           rounds the parameter to a multiple of 10^(-digits). If digits=<0, an integer is returned. Default value NULL does not modifications.
#' @param label            a short description (max. 15 characters) of the controlled parameter. Optional, default is varname.
#' @param tip              a possibly longer description, that will (someday, currently broken) 
#'                         be displayed as a tip when the mouse is moved over the variable name.
#'
#' @return function(tkparent, env)
#' @export
#' @author Karsten Weinert \email{k.weinert@@gmx.net}
slider <- function(varname, from, to, init=NULL, digits=NULL, label=NULL, tip="") {
  # check arguments
  if(!is.character(varname)) stop("invalid varname argument, string expected.")
  if(!is.numeric(from)) stop("invalid from argument, number expected.")
  if(!is.numeric(to)) stop("invalid to argument, number expected.")
  if(is.null(init)) init <- (to+from)/2
  if(!is.numeric(init) || init<from || init>to) stop(sprintf("invalid init argument, NULL or number between %f and %f expected.", from, to))
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol
  if(!(is.null(digits) || is.wholenumber(digits))) stop("invalid digits argument, whole number or NULL expected.")
  if(!(is.null(label) || is.character(label))) stop("invalid label argument, string or NULL expected.")
  if(is.null(label)) label <- varname
  if(!is.character(tip)) stop("invalid tip argument, string expected.")
  
  buildWidget <- function(tkParent, env) {
    f <- tk2frame(tkParent)
    v <- tclVar(init)
    w <- tk2label(f, text=label, tip=tip,  width=15, justify="right")
    tkpack(w, side="left", padx=5)
    w <- tk2scale(f, from=from, to=to, orient="horizontal", variable=v, takefocus=0)
    if(!is.null(digits)) {
      updater <- function(...) {
        tclvalue(v) <- round(as.numeric(tclvalue(v))*10^digits) / 10^digits
      }
      tkconfigure(w, command=updater)
      tclvalue(v) <- round(init)
    }
    tkpack(w, side="left", padx=5)
    w <- tk2entry(f, width=5, textvariable=v, state="disabled", takefocus=0)
    tkpack(w, side="left", padx=5)
    if(is.null(digits) || (digits > 0))
      assign(varname, function() as.numeric(tclvalue(v)), envir=env)
    else
      assign(varname, function() as.integer(tclvalue(v)), envir=env)
    return(f)
  }
  return(buildWidget)
}

#' Creates a function that creates a combobox widget.
#'
#' The created function takes two parameters, tkParent (the parent for the new combobox widget) and
#' env (an environment that provides access to the combobox choice).
#'
#' @param varname          a name for the parameter that will be controlled by a combobox
#' @param choices           the choices the user can select, a list of strings.
#' @param init             the initial choice on start. Optional, default is the first of the choices.
#' @param label            a short description (max. 15 characters) of the controlled parameter. Optional, default is varname.
#' @param tip              a possibly longer description, that will (someday, currently broken) 
#'                         be displayed as a tip when the mouse is moved over the variable name.
#'
#' @return function(tkparent, env)
#' @export
#' @author Karsten Weinert \email{k.weinert@@gmx.net}
combobox <- function(varname, choices, init=NULL, label=NULL, tip="") {
  # check arguments
  if(!is.character(varname)) stop("invalid varname argument, string expected.")
  if(!(is.character(choices) && is.vector(choices)) || !is.function(choices)) stop("invalid choices argument, a vector of strings or function expected.")
  if(is.null(init)) init <- choices[[1]]
  if(!is.character(init)) stop("invalid init argument, string or NULL expected.")
  if(!is.character(tip)) stop("invalid tip argument, string expected.")
  if(is.null(label)) label <- varname

  # create combobox builder
  buildWidget <- function(tab, env) {
    result = tk2frame(tab)
    v <- tclVar(init) 
    w <- tk2label(result, text=label, tip=tip,  width=15, justify="right")
    tkpack(w, side="left", padx=5)
    # todo option if exact match is needed or not
    w <- tk2combobox(result, textvariable=v)
    if(is.function(choices))
      tkconfigure(w, postcommand=function() tkconfigure(w, values=choices()))
    else
      tkconfigure(w, values=choices)
    # todo add autocomplete, see http://wiki.tcl.tk/15780
    autoComplete <- function(...) {
      args <- list(...)
      key <- args[[1]]
    }  
    tkpack(w, side="left", padx=5)
    assign(varname, function() tclvalue(v), envir=env)
    return(result)
  }
  return(buildWidget)
}

#' Creates a function that creates a entry widget.
#'
#' The created function takes two parameters, tkParent (the parent for the new entry widget) and
#' env (an environment that provides access to the entry choice).
#'
#' @param varname          a name for the parameter that will be edited in the entry
#' @param init             the initial choice on start. Optional, default is the empty string
#' @param label            a short description (max. 15 characters) of the controlled parameter. Optional, default is varname.
#' @param tip              a possibly longer description, that will (someday, currently broken) 
#'                         be displayed as a tip when the mouse is moved over the variable name.
#'
#' @return function(tkparent, env)
#' @export
#' @author Karsten Weinert \email{k.weinert@@gmx.net}
entry <- function(varname, choices, init="", label=NULL, tip="") {
  # check arguments
  if(!is.character(varname)) stop("invalid varname argument, string expected.")
  if(!is.character(tip)) stop("invalid tip argument, string expected.")
  if(is.null(label)) label <- varname

  # create entry builder
  buildWidget <- function(tab, env) {
    result = tk2frame(tab)
    v <- tclVar(init) 
    w <- tk2label(result, text=label, tip=tip,  width=15, justify="right")
    tkpack(w, side="left", padx=5, anchor="w")
    w <- tk2entry(result, textvariable=v)
    tkpack(w, side="left", padx=5, fill="x")
    assign(varname, function() tclvalue(v), envir=env)
    return(result)
  }
  return(buildWidget)
}

#' Creates a function that creates a entry widget.
#'
#' The created function takes two parameters, tkParent (the parent for the new entry widget) and
#' env (an environment that provides access to the entry choice).
#'
#' @param varname          a name for the parameter that will be edited in the entry
#' @param filter           a function that takes a data.frame object and returns TRUE or FALSE. Only those datasets for which TRUE was
#'                         returned will be displayed. Optional, default is NULL (all datasets).
#' @param init             the initial choice on start. Optional, default is the empty string
#' @param label            a short description (max. 15 characters) of the controlled parameter. Optional, default is varname.
#' @param tip              a possibly longer description, that will (someday, currently broken) 
#'                         be displayed as a tip when the mouse is moved over the variable name.
#'
#' @return function(tkparent, env)
#' @export
#' @author Karsten Weinert \email{k.weinert@@gmx.net}
installedDataFrame <- function(varname, filter=NULL, init="", label=NULL, tip="") {
  # check arguments
  if(!is.character(varname)) stop("invalid varname argument, string expected.")
  if(!(is.null(filter) || is.function(filter))) stop("invalid filter argument, NULL or function expected.")
  if(!is.character(init)) stop("invalid init argument, string expected.")
  if(!is.character(tip)) stop("invalid tip argument, string expected.")
  if(is.null(label)) label <- varname

  # determine data sets
  d <- data(package = .packages(all.available = TRUE))$results
  d <- transform(d, Labels=paste(Package, "::", Item, sep=""))
  choices <- as.character(sort(d[, "Labels"]))
  #print(sprintf("number of datasets found - %d", length(choices)))
  if(!is.null(filter)) {
    loadDataSet <- function(choice) {
        ds <- strsplit(choice, "::")[[1]]
        do.call("data", list(ds[[2]], package=ds[[1]]))
        dframe <- get(ds[[2]])
        return(dframe)
    }
    filterFunc <- function(choice) tryCatch({
        ds <- loadDataSet(choice)
        return(filter(ds))
        }, error=function(e) FALSE)
    choices <- choices[sapply(choices, filterFunc)] 
  }
  print(sprintf("number of datasets after filter - %d", length(choices)))
  if(init=="") init <- choices[[1]]
  
  # create combobox builder
  buildWidget <- function(tkParent, env) {
    resultFrame = tk2frame(tkParent)
    
    # dataset combobox
    v <- tclVar(init) 
    w <- tk2label(resultFrame, text=varname, tip=tip,  width=15, justify="right")
    tkpack(w, side="left", padx=5)
    datasetCombo <- tk2combobox(resultFrame, values=choices, textvariable=v)
    tkpack(datasetCombo, side="left", padx=5)
    loadDataSet <- function() {
      ds <- strsplit(tclvalue(v), "::")[[1]]
      do.call("data", list(ds[[2]], package=ds[[1]], envir=env))
      return(get(ds[[2]], envir=env))
    }
    assign(varname, loadDataSet, envir=env)
    return(resultFrame)
  }
  return(buildWidget)
}

#' Creates a function that creates a entry widget.
#'
#' The created function takes two parameters, tkParent (the parent for the new entry widget) and
#' env (an environment that provides access to the entry choice).
#'
#' @param varname          a name for the parameter that will be edited in the entry
#' @param init             the initial choice on start. Optional, default is the empty string
#' @param label            a short description (max. 15 characters) of the controlled parameter. Optional, default is varname.
#' @param tip              a possibly longer description, that will (someday, currently broken) 
#'                         be displayed as a tip when the mouse is moved over the variable name.
#'
#' @return function(tkparent, env)
#' @export
#' @author Karsten Weinert \email{k.weinert@@gmx.net}
fieldFromDataset <- function(varname, datasetName, factorsOnly=FALSE, label=NULL, tip="") {
  # check arguments
  if(!is.character(varname)) stop("invalid varname argument, string expected.")
  if(!is.character(datasetName)) stop("invalid datasetName argument, string expected.")
  if(!is.logical(factorsOnly)) stop("invalid factorsOnly argument, boolean expected.")
  if(!is.character(tip)) stop("invalid tip argument, string expected.")
  if(is.null(label)) label <- varname
   
  # create combobox builder
  buildWidget <- function(tab, env) {
    getChoices <- function() {
      dframe <- eval(call(datasetName), envir=env)
      choices <- colnames(dframe)
      if(factorsOnly) choices <- choices[sapply(choices, function(c) is.factor(dframe[,c]))]
      return(choices)
    }
    result = tk2frame(tab)
    v <- tclVar("") 
    w <- tk2label(result, text=label, tip=tip,  width=15, justify="right")
    tkpack(w, side="left", padx=5)
    cb <- tk2combobox(result, textvariable=v)
    tkconfigure(cb, postcommand=function() tkconfigure(cb, values=getChoices()))
    tkpack(cb, side="left", padx=5)
    assign(varname, function() tclvalue(v), envir=env)
   
    return(result)
  }
  return(buildWidget)
}

    # updateChoices <- function() {
      # choices <- getChoices()
      # tk_messageBox("ok", sprintf("%d Elemente", length(choices)), "Wert von choices")
      # if(get("needsUpdate", envir=env)()) {
        # tkconfigure(cb, values=choices) 
      # }
    # }